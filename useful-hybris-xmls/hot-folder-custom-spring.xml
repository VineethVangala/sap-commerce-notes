<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:file="http://www.springframework.org/schema/integration/file"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/integration 
	http://www.springframework.org/schema/integration/spring-integration.xsd
	http://www.springframework.org/schema/integration/file 
	http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/> 

	<bean id="baseDirectoryApparel" class="java.lang.String">
		<constructor-arg value="#{baseDirectory}/${tenantId}/apparel" />
	</bean>
	<!-- 1) Scan for files -->
	<file:inbound-channel-adapter id="batchFilesApparel" directory="#{baseDirectoryApparel}"
		filename-regex="^(.*)-(\d+)\.csv" comparator="fileOrderComparator">
		<int:poller fixed-rate="1000" />
	</file:inbound-channel-adapter>
	
	<bean id="fileOrderComparator" class="de.hybris.platform.acceleratorservices.dataimport.batch.FileOrderComparator">
		<property name="prefixPriority">
			<map>
				<!-- default priority is 0 -->
				<entry key="base_product" value="2" />
				<entry key="variant" value="1" />
			</map>
		</property>
	</bean>


	<!-- 2) move the file to processing and create header -->
	<file:outbound-gateway request-channel="batchFilesApparel" reply-channel="batchFilesApparelProc"
		directory="#{baseDirectoryApparel}/processing" delete-source-files="true" />
	<int:service-activator input-channel="batchFilesApparelProc" output-channel="batchFilesHeaderInit" ref="apparelHeaderSetupTask"
		method="execute" />

		<bean id="apparelHeaderSetupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderSetupTask">
			<property name="catalog" value="apparelProductCatalog" />
			<property name="net" value="false" />
			<property name="storeBaseDirectory" ref="baseDirectoryApparel" />
		</bean>


	<!-- 2) move the file to processing and setup header, partly site dependent -->
	<int:service-activator input-channel="batchFilesHeaderInit" output-channel="batchFilesHeader" ref="headerInitTask"
		method="execute" />
		<!-- Commented this block as they are OOTB beans and can be skipped. Add them for any for any customization-->
		<!-- <bean id="headerInitTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderInitTask">
			<property name="sequenceIdParser" ref="batchSequenceIdParser"/>
			<property name="languageParser" ref="batchLanguageParser"/>
			<property name="fallbackLanguage" value="en" />
		</bean>
		<bean id="batchSequenceIdParser" class="de.hybris.platform.acceleratorservices.dataimport.batch.util.SequenceIdParser">
			<property name="parser">
				<bean class="de.hybris.platform.acceleratorservices.util.RegexParser">
					<property name="regex" value="-(\d+)\.csv" />
				</bean>
			</property>
		</bean>
		<bean id="batchLanguageParser" class="de.hybris.platform.acceleratorservices.util.RegexParser">
			<property name="regex" value="-(\w{2})-(\d+)\.csv" />
		</bean> -->

	<!-- 3) transform csv to impex file -->
	<int:service-activator input-channel="batchFilesHeader" output-channel="batchFilesTran" ref="batchTransformerTask"
		method="execute" />
		<!-- Commented this block as they are OOTB beans and can be skipped. Add them for any for any customization-->
		<!-- <bean id="batchTransformerTask" 
			class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ImpexTransformerTask" 
			init-method="initConvertersMap">
			<property name="fieldSeparator" value="," />
			<property name="encoding" value="UTF-8" />
			<property name="linesToSkip" value="0"/>
			<property name="cleanupHelper" ref="cleanupHelper" />
		</bean> -->

	<!-- Transformer converters mappings -->
	<bean id="batchApparelProductConverterMapping" 
		  class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping" 
		  p:mapping="base_product" 
		  p:converter-ref="batchApparelProductConverter"/>
	
	<bean id="batchSizeVariantConverterMapping" 
		  class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping" 
		  p:mapping="variant" 
		  p:converter-ref="batchSizeVariantConverter"/>
		  
	<bean id="batchStyleVariantConverterMapping" 
		  class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping" 
		  p:mapping="variant" 
		  p:converter-ref="batchStyleVariantConverter"/>
	
	<!-- 4) run impex import -->
	<int:service-activator input-channel="batchFilesTran" output-channel="batchFilesImp" ref="batchRunnerTask"
		method="execute" />
		<!-- Commented this block as they are OOTB beans and can be skipped. Add them for any for any customization-->
		<!-- <bean id="batchRunnerTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.AbstractImpexRunnerTask">
			<property name="sessionService" ref="sessionService" />
			<property name="importService" ref="importService" />
			<lookup-method name="getImportConfig" bean="importConfig" /> 
		</bean>
		<bean id="importConfig" class="de.hybris.platform.servicelayer.impex.ImportConfig" scope="prototype">
			<property name="removeOnSuccess" value="true" />
			<property name="failOnError" value="false" />
			<property name="synchronous" value="true" />
			<property name="legacyMode" value="false" />
			<property name="maxThreads" value="#{configurationService.configuration.getProperty('acceleratorservices.batch.impex.max-threads')}" />
			<property name="locale" value="en"/>
		</bean> -->

	<!-- 5) Cleanup -->
	<int:service-activator input-channel="batchFilesImp" ref="batchCleanupTask" method="execute" />
	<bean id="batchCleanupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.CleanupTask">
		<property name="cleanupHelper" ref="cleanupHelper" />
	</bean>
		<!-- Commented this block as they are OOTB beans and can be skipped. Add them for any for any customization-->
		<!-- <int:channel id="errorChannel" />
	
		<int:service-activator input-channel="errorChannel" ref="errorHandler" method="onError" />
		<bean id="errorHandler" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.ErrorHandler">
			<property name="cleanupHelper" ref="cleanupHelper" />
		</bean>
		<bean id="cleanupHelper" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.CleanupHelper">
			<property name="timeStampFormat" value="yyyyMMddHHmmssSSS" />
		</bean> -->

	<!-- Apparel specific converters -->
	<bean id="batchApparelProductConverter" parent="abstractDefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				# Insert Apparel Products
				INSERT_UPDATE ApparelProduct;code[unique=true];varianttype(code);name[lang=$lang];description[lang=$lang];ean;manufacturerName;manufacturerAID;unit(code)[default=pieces];$approved;Europe1PriceFactory_PTG(code)[default=eu-vat-full];sequenceId[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.SequenceIdTranslator];$catalogVersion
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{S}</value>
		</property>
		<property name="rowFilter">
			<bean class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexRowFilter">
				<property name="expression" value="row[1]"/>
			</bean>
		</property>
		<property name="type" value="ApparelProduct"/>
	</bean>
	<bean id="batchSizeVariantConverter" parent="abstractDefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				$baseProduct=baseProduct(code,$catalogVersion)
				# Insert size variant specific data
				INSERT_UPDATE ApparelSizeVariantProduct;$baseProduct;code[unique=true];variantType(code);style[lang=$lang];size[lang=$lang];sequenceId[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.SequenceIdTranslator];$catalogVersion;$approved
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{+1};{2};{3};{4};{S}</value>
		</property>
		<property name="rowFilter">
			<bean class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexRowFilter">
				<property name="expression" value="row[2] == 'ApparelSizeVariantProduct' || row[4]"/>
			</bean>
		</property>
	</bean>
	<bean id="batchStyleVariantConverter" parent="abstractDefaultImpexConverter">
		<property name="header">
			<value>#{defaultImpexProductHeader}
				$baseProduct=baseProduct(code,$catalogVersion)
				# Insert style variant specific data
				INSERT_UPDATE ApparelStyleVariantProduct;$baseProduct;code[unique=true];variantType(code);style[lang=$lang];sequenceId[translator=de.hybris.platform.acceleratorservices.dataimport.batch.converter.SequenceIdTranslator];$catalogVersion;$approved
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{+1};{2};{3};{S}</value>
		</property>
		<property name="rowFilter">
			<bean class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexRowFilter">
				<property name="expression" value="row[2] == 'ApparelStyleVariantProduct' || (!row[2] &amp;&amp; !row[4])"/>
			</bean>
		</property>
	</bean>

</beans>